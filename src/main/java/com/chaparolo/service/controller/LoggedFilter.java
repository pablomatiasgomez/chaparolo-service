package com.chaparolo.service.controller;

import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;

import com.chaparolo.service.controller.util.ParamsHelper;

import spark.Request;
import spark.Spark;

public class LoggedFilter {

    private static final String APPLICATION_JSON = "application/json";
    private static final List<String> publicPaths = Arrays.asList("/css/", "/js/", "/img/", "/fonts/", "/redirect",
        "/session");

    private String atpLoginUrl;
    private String atpLogoutUrl;
    private String appBasePath;

    public LoggedFilter( String appBasePath) {
        this.appBasePath = appBasePath;
    }

    public void register() {
        Spark.before((request, response) -> {
            if (this.isProtectedPath(request.pathInfo())) {
                if (!this.isLogged(request)) {
                    if (this.isApiRequest(request)) {
                        Spark.halt(401);
                    } else {
                        response.redirect(this.getAtpLoginRedirectUrl(request));
                        Spark.halt(302);
                    }
                }
            }
        });

        // Used to manage the session generated by atp and redirect to the specified url
        Spark.get(this.appBasePath + "/redirect", (request, response) -> {
            response.cookie("session", ParamsHelper.getStringQueryParam(request, "session"));
            response.redirect(ParamsHelper.getStringQueryParam(request, "url"));

            return "";
        });

        // Logout from atp
        Spark.get(this.appBasePath + "/logout", (request, response) -> {
            response.redirect(this.getAtpLogoutRedirectUrl(request));
            return "";
        });

        // Keep the session alive
        Spark.head(this.appBasePath + "/session", (request, response) -> {
            if (!this.isLogged(request)) {
                Spark.halt(401);
            }
            return "";
        });
    }

    private boolean isProtectedPath(String path) {
        if (!path.startsWith(this.appBasePath)) {
            return false;
        }
        path = path.substring(this.appBasePath.length());

        if (publicPaths.stream().anyMatch(path::startsWith)) {
            return false;
        }

        return true;
    }

    private boolean isApiRequest(Request request) {
        return APPLICATION_JSON.equalsIgnoreCase(request.contentType());
    }

    private String getAtpLogoutRedirectUrl(Request request) {
        String backToPath = this.encodeURIComponent(this.appBasePath);
        String ownRedirectUrl = "http://" + request.host() + this.appBasePath + "/redirect?url=" + backToPath;
        return String.format(this.atpLogoutUrl, this.encodeURIComponent(ownRedirectUrl));
    }

    private String getAtpLoginRedirectUrl(Request request) {
        String backToPath = this.encodeURIComponent(request.pathInfo());
        String ownRedirectUrl = "http://" + request.host() + this.appBasePath + "/redirect?url=" + backToPath;
        return String.format(this.atpLoginUrl, this.encodeURIComponent(ownRedirectUrl));
    }

    private Boolean isLogged(Request request) {
        String session = request.cookie("session");
        if (session == null) {
            session = ParamsHelper.getStringQueryParam(request, "session");
        }
        if (session == null) { // TODO  || !this.atpConnector.isValid(session)) {
            return Boolean.FALSE;
        }

        return Boolean.TRUE;
    }

    private String encodeURIComponent(String component) {
        try {
            return URLEncoder.encode(component, "UTF-8");
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
